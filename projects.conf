# vim: filetype=omnilinter

################################################################################
# Repository standards
################################################################################
[add README.md]
    nofiles /README.md

[add LICENSE]
    nofiles /LICENSE /COPYING

[add CI badge]
	tags actions
	files .github/workflows/*.yml
	files README.md
		nomatch "actions/workflows.*badge.svg"

[link CI badge to actions]
	tags actions
	files README.md
		match "!\[.*github\.com/.*(workflows|actions)" !"\[!\["

[remove coveralls (replace with codecov)]
	tags actions
	files README.md
		match "coveralls.io"

[remove travis CI (replace with GH actions)]
	tags actions
	files .travis.yml

################################################################################
# General sources
################################################################################
[add SPDX-FileCopyrightText]
	tags source,minor
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** !setup.py
		nomatch /^..? SPDX-FileCopyrightText:/

[add SPDX-License-Identifier]
	tags source,minor
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** !setup.py
		nomatch /^..? SPDX-License-Identifier:/

[trailing whitespace]
	tags source
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** 
		match /[ 	]$/

[XXX items]
	tags source,minor
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** 
		match /XXX/

[TODO items]
	tags source
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** 
		match /TODO/

[FIXME items]
	tags source
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** 
		match /FIXME|Fixme/

[conflict markers]
	tags source
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs !target/** !/build/** 
		match /^(<<<<<<<|>>>>>>>) /

################################################################################
# Github actions
################################################################################
[update checkout action to @v4]
	tags actions
	files .github/workflows/*.yml
		match "actions/checkout@" !"@v4$"

[update codecov action to @v4]
	tags actions
	files .github/workflows/*.yml
		match "codecov/codecov-action@" !"@v4$"

[must specify codecov token]
	tags actions
	files .github/workflows/*.yml
		match "codecov/codecov-action@"
		nomatch /secrets.CODECOV_TOKEN/

[specify codecov token in with.token insted of env]
	tags actions
	files .github/workflows/*.yml
		match /CODECOV_TOKEN.*secrets.CODECOV_TOKEN/

# submitting coverage would fail as token is not accessible for this kind of PR
[disable coverage for dependabot PRs]
	tags actions
	files .github/dependabot.yml
	files .github/workflows/*.yml
		match /CODECOV_TOKEN/
		nomatch /github\.actor.*!=.*dependabot/

[must have github action for CI]
	tags actions
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs
	nofiles .github/workflows/*.yml

[fix main CI image to ubuntu-latest]
	tags actions
	files .github/workflows/*.yml
		match /runs-on: / !/ubuntu-latest/

[fix container CI image to ubuntu-rolling]
	tags actions
	files *.py *.c *.cpp *.cc *.cxx *.h *.hh *.hxx *.hpp *.rs
	files .github/workflows/*.yml
		match /image: ubuntu/ !/ubuntu-rolling/

[enable dependabot]
	tags actions
	files Cargo.toml
	nofiles .github/dependabot.yml

################################################################################
# Python specific
################################################################################
[convert to pyproject.toml]
	tags python
	files setup.py

[indent with spaces]
	tags source,python
	files *.py
		match /^	/

[update type aliases to corresponding built-in types]
	tags source,python,PEP585
	files *.py
		match /from typing import.*(Tuple|List|Dict|Set|FrozenSet|Type|Pattern|Match|AbstractSet|ContextManager|AsyncContextManager)/

[replace Optional with union types (e.g. Optional[int]] â†’ int | None)]
	tags source,python,PEP604
	files *.py
		match /from typing import.*Optional/

################################################################################
# Makefile specific
################################################################################
[add all target]
	tags make
	files Makefile GNUMakefile BSDMakefile
		nomatch /^all:/

[indent with tabs]
	tags make
	files Makefile GNUMakefile BSDMakefile
		match /^ /

[allow to override CC/CXX/CFLAGS/CXXFLAGS (use ?=)"]
	tags make
	files Makefile GNUMakefile BSDMakefile
		match "^(CC|CXX|CFLAGS|CXXFLAGS)\s*="

[honor DESTDIR when installing]
	tags make
	files Makefile GNUMakefile BSDMakefile
		match /install.*PREFIX/ !/DESTDIR/

################################################################################
# Makefile specific
################################################################################
[use lowercase commands]
	tags cmake
	files CMakeLists.txt
		match /^(ADD_EXECUTABLE|ADD_DEFINITIONS|ADD_LIBRARY|ADD_SUBDIRECTORY|ADD_TEST|CMAKE_MINIMUM_REQUIRED|ENABLE_TESTING|IF|INCLUDE_DIRECTORIES|MACRO|OPTION|PROJECT|PROJECT|SET|TARGET_LINK_LIBRARIES)\(/

[always use GNUInstallDirs paths for installation]
	tags cmake
	files CMakeLists.txt
		match /install\(.*?TARGETS.*?\)/ !/CMAKE_INSTALL_/

[specify VERSION in project()]
	tags cmake
	files CMakeLists.txt
		match /project\(.*?\)/ !/VERSION/

[specify LANGUAGES in project()]
	tags cmake
	files CMakeLists.txt
		match /project\(.*?\)/ !/LANGUAGES/

[use set(CMAKE_CXX_STANDARD)]
	tags cmake
	files CMakeLists.txt
		match "add_definitions\(.*-std=c\+\+"

[update CXX standard to 23]
	tags cmake
	files CMakeLists.txt
		match "CMAKE_CXX_STANDARD (11|14|17|20)"

[update to cmake 3.x]
	tags cmake
	files CMakeLists.txt
		match /cmake_minimum_required\(VERSION 2/

[don't set CMAKE_BUILD_TYPE]
	tags cmake
	files CMakeLists.txt
		match /set\(CMAKE_BUILD_TYPE/

[use SDL2pp through target (target_link_libraries(SDL2pp::SDL2pp))]
	tags cmake
	files CMakeLists.txt
		match /target_link_libraries.*SDL2PP_LIBRARIES/

################################################################################
# C++ specific
################################################################################
[convert include guards to #pragma once]
	tags source,c++
	files *.hh *.hpp *.hxx !/build/**
		match /#ifndef.*_H(_|$)/
		nomatch /#pragma once/

################################################################################
# Rust specific
################################################################################
[add documentation (at least at module level)]
	tags source,rust
    files src/*.rs
		nomatch "^//!"

[fix ignored test]
	tags source,rust
    files *.rs
		match "#\[ignore\]"

################################################################################
# Cargo specific
################################################################################
[add license field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^license(-file)? =/
[add readme field to package section of Cargo.toml]
    tags cargo
    nofiles README README.md README.txt  # these are picked up automatically by crates.io, see https://doc.rust-lang.org/cargo/reference/manifest.html#the-readme-field
    files Cargo.toml
		nomatch /^readme =/
[add homepage field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^homepage =/
[add repository field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^repository =/
[add keywords field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^keywords =/
[add categories field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^categories =/
[add description field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^description =/
[add authors field to package section of Cargo.toml]
    tags cargo
    files Cargo.toml
		nomatch /^authors =/
